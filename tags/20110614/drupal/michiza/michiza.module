<?php

/**
 * preserve RSS for 100 years. "Forever" will be an option in D7
 */
function michiza_form_aggregator_admin_settings_alter(&$form, &$form_state) {
  $form['aggregator_clear']['#options'][3153600000]  = "100 years";
}

/**
 * Hide "email", "homepage" in the "post new comments" form to prevent spam
 */
function michiza_form_comment_form_alter(&$form, &$form_state) {
  unset($form['mail']);
  unset($form['homepage']);
}

/**
 * Implementation of hook_init().
 */
function michiza_init() {
  // Disable breadcrumbs for all pages except admin pages
  if (!preg_match("/^admin.*/",$_GET['q'])) {
    drupal_set_breadcrumb(array());
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function michiza_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  /* Some content type modules override the default breadcrumb. This is the case
   * blogs and forums, which have to be beaten to death more thoroughly.
   * NOTE: This function works on nodes only. It effectively kills breadcrumbs
   * on blog and forum posts, but not on the forum overview. Thats ok, since
   * breadcrumbs are suppose to survive there anyway.
   */
  if ($node->type=='forum') return; // Bail out when hitting a forum node
  drupal_set_breadcrumb(array());
}
// maybe to implement hook_prepare and hook_view?


function michiza_cron() {
  // periodically set the site slogan
  /*$quote = db_result(db_query("SELECT title FROM {node} WHERE status=1 AND type='quotes' ORDER BY rand() LIMIT 1"));
  variable_set('site_slogan', $quote);*/
}


function michiza_comment($a1, $op) {
  global $user;
  switch ($op) {
    case "validate":
      //check if anonymous user
      if (!$user->uid) {
        //the checks are derived from the filter module > _filter_url method
        if (preg_match("@(http://|https://|ftp://|mailto:|smb://|afp://|file://|gopher://|news://|ssl://|sslv2://|sslv3://|tls://|tcp://|udp://)+@se", $a1["comment"]) || preg_match("@(www\.[a-zA-Z0-9\@:%_+*~#?&=.,/;-]*[a-zA-Z0-9\@:%_+~#\&=/;-])+@se", $a1["comment"])
        || preg_match("@(http://|https://|ftp://|mailto:|smb://|afp://|file://|gopher://|news://|ssl://|sslv2://|sslv3://|tls://|tcp://|udp://)+@se", $a1["subject"]) || preg_match("@(www\.[a-zA-Z0-9\@:%_+*~#?&=.,/;-]*[a-zA-Z0-9\@:%_+~#\&=/;-])+@se", $a1["subject"])
        || preg_match("@(http://|https://|ftp://|mailto:|smb://|afp://|file://|gopher://|news://|ssl://|sslv2://|sslv3://|tls://|tcp://|udp://)+@se", $a1["name"]) || preg_match("@(www\.[a-zA-Z0-9\@:%_+*~#?&=.,/;-]*[a-zA-Z0-9\@:%_+~#\&=/;-])+@se", $a1["name"])) {
          form_set_error("comment", t("Please eliminate URLs in your comment or name, or replace '.' with '-' in order to post links. This is an anti-spam measure. Thanks."));
        }
      }
      break;
  }
}

function michiza_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Michiza - Most Popular'), 
      //'cache' => BLOCK_CACHE_PER_ROLE | BLOCK_CACHE_PER_PAGE,
      'cache' => BLOCK_CACHE_GLOBAL,
    );
    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 0:
        // Your module will need to define this function to render the block.
        $block = array(
          'subject' => t('Most popular posts'), 
          'content' => michiza_most_popular(),
        );
        break;
    }
    return $block;
  }
}

function michiza_most_popular() {
  $num = 5;
  $sql = "SELECT COUNT(path) AS hits, SUBSTR(path, 6) AS nid FROM {accesslog}
    WHERE uid<>1 AND path RLIKE '^node/[0-9]+$' GROUP BY path ORDER BY hits DESC LIMIT 100";
  $rec = db_query($sql);
  $list_sticky = array();
  $list_hits = array();
  while ($stats = db_fetch_object($rec)) {
    $node = node_load($stats->nid);
    if ($node->type == 'blog' && $node->status == 1 && $node->sticky == 1) {
      $list_sticky[] = l($node->title, $node->path);
    } else if ($node->type == 'blog' && $node->status == 1 && $stats->hits > 5) {
      $list_hits[] = l($node->title, $node->path);
    }
  }
  if (count($list_sticky) >= $num) {
    $list = $list_sticky;
  } else {
    $list_hits = array_slice($list_hits, 0, $num-count($list_sticky));
    $list = array_merge($list_sticky, $list_hits);
  }
  return theme("item_list", $list);
}

// should be placed in the template file.
// implemented as pixture_reloaded_feed_icon
/*function michiza_feed_icon($url, $title) {
  if ($image = theme('image', 'misc/feed.png', t('Syndicate content'), t("Subscribe RSS"))) {
    return '<a href="'. url("blog/feed") .'" class="feed-icon">'. $image .'</a>' . l(t("Subscribe RSS feed"), "blog/feed");
  }
}
*/

function michiza_project_page_link_alter(&$links, $node) {
  unset($links['development']['links']['pending_patches']);
  $links['development']['links']['view_issues'] = l(t('View open issues'), 'project/issues/'.$node->project['uri']);
  $links['development']['links']['create_issue'] = l(t('Create a new issue'), 'node/add/project-issue/'.$node->project['uri']);
}

function michiza_link_alter(&$links, $node) {
  unset($links['blog_usernames_blog']);
}

